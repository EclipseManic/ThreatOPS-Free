# Filebeat Configuration for ThreatOps SOC
# This configuration collects logs and sends them to OpenSearch

filebeat.inputs:
# Windows Event Logs (EVTX)
- type: log
  enabled: true
  paths:
    - ${path.home}/data/sample_logs/windows.evtx
  fields:
    log_type: windows_security
    environment: lab
  fields_under_root: true
  
# Linux Authentication Logs
- type: log
  enabled: true
  paths:
    - ${path.home}/data/sample_logs/auth.log
  fields:
    log_type: linux_auth
    environment: lab
  fields_under_root: true
  multiline.pattern: '^[A-Za-z]{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2}'
  multiline.negate: true
  multiline.match: after

# Application JSON Logs
- type: log
  enabled: true
  paths:
    - ${path.home}/data/sample_logs/application.json
  json.keys_under_root: true
  json.add_error_key: true
  fields:
    log_type: application
    environment: lab
  fields_under_root: true

# Attack Simulation Logs (New)
- type: log
  enabled: true
  paths:
    - ${path.home}/data/logs/sim_attacks.log
  json.keys_under_root: true
  json.add_error_key: true
  fields:
    log_type: attack_simulation
    environment: lab
  fields_under_root: true
  tags: ["simulation", "threat"]

# Processors to enrich and parse logs
processors:
  - add_host_metadata:
      when.not.contains.tags: forwarded
  - add_cloud_metadata: ~
  - add_docker_metadata: ~
  - add_kubernetes_metadata: ~
  
  # Add timestamp
  - timestamp:
      field: timestamp
      layouts:
        - '2006-01-02T15:04:05.999999999Z07:00'
        - '2006-01-02T15:04:05Z'
      test:
        - '2023-12-01T12:00:00.123456789Z'
        
  # Extract IOCs from logs
  - script:
      lang: javascript
      source: >
        function process(event) {
          var msg = event.Get("message");
          if (msg) {
            // Extract IP addresses
            var ipRegex = /\b(?:\d{1,3}\.){3}\d{1,3}\b/g;
            var ips = msg.match(ipRegex);
            if (ips && ips.length > 0) {
              event.Put("extracted_ips", ips);
            }
            
            // Extract domains
            var domainRegex = /\b(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}\b/g;
            var domains = msg.match(domainRegex);
            if (domains && domains.length > 0) {
              event.Put("extracted_domains", domains);
            }
          }
        }

# Output to OpenSearch
output.elasticsearch:
  hosts: ["https://localhost:9200"]
  protocol: "https"
  username: "admin"
  password: "admin"
  
  # SSL Configuration (for self-signed certificates)
  ssl:
    enabled: true
    verification_mode: none
    
  # Index configuration
  index: "threatops-logs-%{+yyyy.MM.dd}"
  
  # Bulk settings for performance
  bulk_max_size: 50
  worker: 2
  
  # Pipeline for additional processing
  pipeline: "threatops-enrichment"

# Setup template
setup.template.name: "threatops"
setup.template.pattern: "threatops-*"
setup.template.enabled: true
setup.template.overwrite: false
setup.template.settings:
  index.number_of_shards: 1
  index.number_of_replicas: 0
  index.refresh_interval: "5s"

# ILM Policy (Index Lifecycle Management)
setup.ilm.enabled: true
setup.ilm.rollover_alias: "threatops"
setup.ilm.pattern: "{now/d}-000001"
setup.ilm.policy_name: "threatops-policy"

# Kibana/OpenSearch Dashboards
setup.dashboards.enabled: true
setup.dashboards.index: ".kibana"

# Logging
logging.level: info
logging.to_files: true
logging.files:
  path: ${path.home}/logs
  name: filebeat
  keepfiles: 7
  permissions: 0644

# Monitoring
monitoring.enabled: false

# HTTP endpoint for health checks
http.enabled: true
http.host: localhost
http.port: 5066

